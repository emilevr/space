#!/bin/sh

echo "👷 Running the pre-commit hook ..."

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
❌ Attempt to add a non-ASCII file name.
    This can cause problems if you want to work with people on other platforms.
    To be portable it is advisable to rename the file.
    If you know what you are doing you can disable this check using:
    git config hooks.allownonascii true
EOF
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
# exec git diff-index --check --cached $against --

echo "👷 Checking if any source of CI files have changed ..."
STAGED_FILES=$(git diff-index --cached --name-only HEAD)
echo $STAGED_FILES | grep -q -e "src/" -F --
GREP_EXIT_CODE=$?
if [ $GREP_EXIT_CODE -ne 0 ]; then
    echo "✔️ No source files were changed. Not running additional tasks."
    exit 0
fi

echo "👷 Checking code with Clippy ..."
cargo clippy
CLIPPY_EXIT_CODE=$?
if [ $CLIPPY_EXIT_CODE -ne 0 ]; then
    echo "❌ Please fix the issues Clippy raised."
    exit 1
else
    echo "✔️ Clippy did not detect any issues."
fi

echo "👷 Checking code formatting ..."
cargo fmt -- --check
FORMATTING_EXIT_CODE=$?
if [ $FORMATTING_EXIT_CODE -ne 0 ]; then
    echo "❌ Please fix the detected formatting issues."
    exit 1
else
    echo "✔️ All formatting checks passed."
fi

echo "🚀 Done."

exit 0
